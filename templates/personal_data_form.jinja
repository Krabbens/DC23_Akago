{% extends "base.jinja" %}
{% block title %}Wniosek o augmentację{% endblock %}
{% block head %}
<style>
    .table-label {
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
</style>
{% endblock %}
{% block content %}
<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-2xl w-full space-y-8 p-10 bg-zinc-800 dark:bg-zinc-800 rounded-xl dark:shadow-2xl border border-zinc-700">
        <div class="flex items-center justify-between">
            <h1 class="text-2xl font-bold text-zinc-100 dark:text-zinc-100">Wniosek o Personalizowaną Augmentację Cybernetyczną</h1>
            <img src="/static/logo.png" alt="Logo" class="h-12 w-12 rounded-md">
        </div>

        <form id="request-form" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {% for name, field in form.fields.items() %}
                <div class="form-group rounded-md space-y-2 {% if field.type == 'table' %}col-span-full{% endif %}">
                    {% if field.type == "input" %}
                    <label for="{{ name }}" class="block text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</label>
                    <input type="{{ field.input_type }}" id="{{ name }}" name="{{ name }}"
                        class="w-full px-3 py-2 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md focus:outline-none focus:ring-2 focus:ring-zinc-500">

                    {% elif field.type == "radiogroup" %}
                    <fieldset>
                        <legend class="text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</legend>
                        <div class="flex flex-col space-y-3 mt-2">
                            {% for radio in field.radios %}
                            <label class="flex items-center text-zinc-300 dark:text-zinc-300 w-full">
                                <input type="radio" name="{{ name }}" value="{{ radio.value }}"
                                    class="form-radio text-zinc-500 focus:ring-zinc-500 bg-zinc-700 dark:bg-zinc-700 border-zinc-600 dark:border-zinc-600">
                                <span class="ml-2">{{ radio.label }}</span>
                            </label>
                            {% endfor %}
                        </div>
                    </fieldset>

                    {% elif field.type == "table" %}
                    <div class="space-y-2">
                        <p class="text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</p>
                        <div class="overflow-x-auto rounded-md">
                            <table class="w-full border border-zinc-600 dark:border-zinc-600">
                                <thead>
                                    <tr class="bg-zinc-700 dark:bg-zinc-700">
                                        {% for column in field.columns %}
                                        <th class="p-2 text-left text-xs font-medium text-zinc-300 uppercase tracking-wider">
                                            {{ column.label }}
                                        </th>
                                        {% endfor %}
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for _ in range(field.row_count) %}
                                    <tr>
                                        {% for column in field.columns %}
                                        <td class="p-2 border-b border-zinc-600 dark:border-zinc-600">
                                            <input type="text" name="{{ column.name }}"
                                                class="w-full px-2 py-1 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md text-sm">
                                        </td>
                                        {% endfor %}
                                    </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    {% else %}
                    <p class="text-red-500">Nieznany rodzaj pola formularza: <code>{{ field.type }}</code></p>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <div class="flex justify-end space-x-4">
                <button type="button" class="px-4 py-2 bg-zinc-700 dark:bg-zinc-700 text-zinc-300 dark:text-zinc-300 rounded-md hover:bg-zinc-600">
                    Anuluj
                </button>
                <button type="submit"
                    class="px-6 py-2 bg-zinc-600 dark:bg-zinc-600 text-white rounded-md hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-zinc-500 focus:ring-offset-2">
                    Wyślij
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    const fields = {};

    {% for name, field in form.fields.items() %}
    {% if field.type == "input" %}
    fields['{{ name }}'] = { type: 'singleValue', required: true };
    {% elif field.type == "radiogroup" %}
    fields['{{ name }}'] = { type: 'singleValue', required: true };
    {% elif field.type == "table" %}
    fields['{{ name }}'] = {
        type: 'multiValue',
        columnNames: [
            {% for column in field.columns %}
            '{{ column.name }}',
            {% endfor %}
        ],
        required: true
    };
    {% endif %}
    {% endfor %}

    document.getElementById('request-form').addEventListener('submit', (event) => {
        event.preventDefault();

        const formData = new FormData(event.target);
        let isValid = true;

        // Clear previous error messages
        document.querySelectorAll('.error-message').forEach(el => el.remove());

        for (const [name, { type, columnNames, required }] of Object.entries(fields)) {
            const element = document.querySelector(`[name="${name}"]`);
            if (type === 'singleValue') {
                const value = formData.get(name)?.trim();
                if (required && (!value || value === "")) {
                    isValid = false;
                    displayError(element, "To pole jest wymagane.");
                }
            } else if (type === 'multiValue') {
                const columns = columnNames.map(colName => formData.getAll(colName));
                const hasEmptyRow = columns.some(col => col.some(val => !val?.trim()));

                if (required && hasEmptyRow) {
                    isValid = false;
                    displayError(
                        element.closest('table'),
                        "Wszystkie pola w tabeli muszą być wypełnione."
                    );
                }
            }
        }

        if (isValid) {
            const augmentationRequest = {};

            for (const [name, { type, columnNames }] of Object.entries(fields)) {
                if (type === 'singleValue') {
                    augmentationRequest[name] = formData.get(name);
                } else {
                    const rows = [];
                    const columns = Object.fromEntries(
                        columnNames.map(col => [col, formData.getAll(col)])
                    );
                    const rowCount = columns[columnNames[0]].length;

                    for (let i = 0; i < rowCount; i++) {
                        rows.push(
                            Object.fromEntries(columnNames.map(col => [col, columns[col][i]]))
                        );
                    }

                    augmentationRequest[name] = rows;
                }
            }

            fetch('', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(augmentationRequest),
            }).then(response => {
                if (response.ok) {
                    window.location = response.headers.get('Location');
                }
            });
        }
    });

    function displayError(element, message) {
        const error = document.createElement('span');
        error.textContent = message;
        error.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');
        
        // Find the appropriate container to append the error message
        const container = element.closest('.form-group');
        if (container) {
            container.appendChild(error);
        } else {
            element?.after(error);
        }
    }
</script>

{% endblock %}
