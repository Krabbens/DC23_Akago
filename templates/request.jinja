{% extends "base.jinja" %}
{% block title %}Szczegóły wniosku{% endblock %}
{% block content %}
<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-2xl w-full space-y-8 p-10 bg-zinc-800 dark:bg-zinc-800 rounded-xl dark:shadow-2xl border border-zinc-700">
        <div class="flex items-center justify-between">
            <h1 class="text-2xl font-bold text-zinc-100 dark:text-zinc-100">Szczegóły wniosku</h1>
            <img src="/static/logo.png" alt="Logo" class="h-12 w-12 rounded-md">
        </div>

        <a href="/" 
           class="inline-block text-zinc-400 hover:text-zinc-300 transition-colors duration-200">
            Powrót na stronę główną
        </a>

        <div class="flex gap-4 mt-6">
            <button type="button" id="download"
                class="px-6 py-3 bg-zinc-600 dark:bg-zinc-600 text-white text-lg font-semibold rounded-lg hover:bg-zinc-700 transition-colors duration-200 flex items-center gap-2">
                <span class="loading hidden">⏳</span>
                <span>Pobierz</span>
            </button>
            <button type="button" id="send"
                class="px-6 py-3 bg-zinc-600 dark:bg-zinc-600 text-white text-lg font-semibold rounded-lg hover:bg-zinc-700 transition-colors duration-200 flex items-center gap-2">
                <span class="loading hidden">⏳</span>
                <span>Wyślij na twój adres e-mail</span>
            </button>
        </div>

        <div id="status" class="hidden mt-4 p-4 rounded-lg"></div>
    </div>
</div>

<script>
    const filenamePattern = /^attachment; filename="(?<filename>.+)"$/;
    const anchor = document.createElement('a');
    anchor.style.display = 'none';

    function showStatus(message, isError = false) {
        const status = document.getElementById('status');
        status.textContent = message;
        status.className = `mt-4 p-4 rounded-lg ${isError ? 'bg-red-900 text-red-100' : 'bg-green-900 text-green-100'}`;
        status.classList.remove('hidden');
    }

    function setLoading(button, isLoading) {
        const loadingIndicator = button.querySelector('.loading');
        loadingIndicator.classList.toggle('hidden', !isLoading);
        button.disabled = isLoading;
    }

    document.getElementById('download').addEventListener('click', async (event) => {
        const button = event.currentTarget;
        setLoading(button, true);

        try {
            const response = await fetch('{{ url_for("download_request", id=id) }}', {
                method: 'GET',
            });

            if (!response.ok) throw new Error('Błąd pobierania pliku');

            const filename = response.headers.get('Content-Disposition')?.match(filenamePattern)
                ?.groups.filename ?? 'request.pdf';

            const blob = await response.blob();
            anchor.href = URL.createObjectURL(blob);
            anchor.download = filename;

            document.body.append(anchor);
            anchor.click();

            anchor.remove();
            URL.revokeObjectURL(anchor.href);
            showStatus('Plik został pobrany pomyślnie');
        } catch (error) {
            showStatus('Wystąpił błąd podczas pobierania pliku', true);
        } finally {
            setLoading(button, false);
        }
    });

    document.getElementById('send').addEventListener('click', async (event) => {
        const button = event.currentTarget;
        setLoading(button, true);

        try {
            const response = await fetch('{{ url_for("email_request", id=id) }}', {
                method: 'POST',
            });

            if (!response.ok) throw new Error('Błąd wysyłania emaila');
            showStatus('Email został wysłany pomyślnie');
        } catch (error) {
            showStatus('Wystąpił błąd podczas wysyłania emaila', true);
        } finally {
            setLoading(button, false);
        }
    });
</script>
{% endblock %}
