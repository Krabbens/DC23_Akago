{% extends "base.jinja" %}
{% block title %}Wniosek o augmentację{% endblock %}
{% block head %}
<style>
    .table-label {
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
</style>
{% endblock %}
{% block content %}
<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div
        class="max-w-2xl w-full space-y-8 p-10 bg-zinc-800 dark:bg-zinc-800 rounded-xl dark:shadow-2xl border border-zinc-700">
        <div class="flex items-center justify-between">
            <h1 class="text-2xl font-bold text-zinc-100 dark:text-zinc-100">Wniosek o Personalizowaną Augmentację
                Cybernetyczną</h1>
            <img src="/static/logo.png" alt="Logo" class="h-12 w-12 rounded-md">
        </div>

        <form id="request-form" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {% for name, field in form.fields.items() %}
                <div class="form-group rounded-md space-y-2 {% if field.type == 'table' %}col-span-full{% endif %}">
                    {% if field.type == "input" %}
                    <label for="{{ name }}" class="block text-sm font-medium text-zinc-300 dark:text-zinc-300">{{
                        field.label }}</label>
                    <input type="{{ field.input_type }}" id="{{ name }}" name="{{ name }}"
                        class="w-full px-3 py-2 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md focus:outline-none focus:ring-2 focus:ring-zinc-500">

                    {% elif field.type == "radiogroup" %}
                    <fieldset>
                        <legend class="text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</legend>
                        <div class="flex flex-col space-y-3 mt-2">
                            {% for radio in field.radios %}
                            <label class="flex items-center text-zinc-300 dark:text-zinc-300 w-full">
                                <input type="radio" name="{{ name }}" value="{{ radio.value }}"
                                    class="form-radio text-zinc-500 focus:ring-zinc-500 bg-zinc-700 dark:bg-zinc-700 border-zinc-600 dark:border-zinc-600">
                                <span class="ml-2">{{ radio.label }}</span>
                            </label>
                            {% endfor %}
                        </div>
                    </fieldset>

                    {% elif field.type == "table" %}
                    <div class="space-y-2 rounded-md">
                        <p class="text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</p>
                        <div class="overflow-x-auto rounded-sm">
                            <table class="w-full border border-zinc-600 dark:border-zinc-600">
                                <thead>
                                    <tr class="bg-zinc-700 dark:bg-zinc-700">
                                        {% for column in field.columns %}
                                        <th
                                            class="p-2 text-left text-xs font-medium text-zinc-300 uppercase tracking-wider">
                                            {{ column.label }}
                                        </th>
                                        {% endfor %}
                                        <th class="p-2 w-12"></th>
                                    </tr>
                                </thead>
                                <tbody id="{{ name }}-table-body">
                                    <tr>
                                        {% for column in field.columns %}
                                        <td class="p-2 border-b border-zinc-600 dark:border-zinc-600">
                                            <input type="{{ column.input_type|default('text') }}"
                                                name="{{ name }}[0][{{ column.name }}]" {% if column.input_type=='date'
                                                %} placeholder="RRRR-MM-DD" {% endif %}
                                                class="w-full px-2 py-1 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md text-sm focus:ring-2 focus:ring-blue-500">
                                        </td>
                                        {% endfor %}
                                        <td class="p-2 border-b border-zinc-600 dark:border-zinc-600 text-center">
                                            <button type="button" onclick="removeRow(this)"
                                                class="text-zinc-400 hover:text-red-500 transition-colors">
                                                <span class="fa fa-solid fa-times"></span>
                                            </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <button type="button" onclick="addRowWithValue('{{ name }}')"
                            class="mt-2 px-3 py-2 bg-zinc-600 dark:bg-zinc-600 text-white rounded-md hover:bg-zinc-700 transition-colors">
                            <span class="fa fa-solid fa-plus"></span>
                        </button>
                    </div>

                    {% elif field.type == "picklist" %}
                    <label for="{{ name }}" class="block text-sm font-medium text-zinc-300 dark:text-zinc-300">{{
                        field.label }}</label>
                    <select id="{{ name }}" name="{{ name }}"
                        class="w-full px-3 py-2 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md focus:outline-none focus:ring-2 focus:ring-zinc-500">
                        {% for option in augmentation_options %}
                        <option value="{{ option.value }}" data-is-extra="{{ option.is_extra }}">
                            {{ option.name }}
                        </option>
                        {% endfor %}
                    </select>
                    <div id="extra-message" class="mt-4 hidden">
                        <div
                            class="border border-red-700 dark:border-red-700 bg-red-900 dark:bg-red-900 p-4 rounded-md">
                            <label class="flex items-center">
                                <input type="checkbox" name="extra_permission" value="yes"
                                    class="form-checkbox text-red-500 focus:ring-red-500 bg-zinc-700 dark:bg-zinc-700 border-zinc-600 dark:border-zinc-600">
                                <span class="ml-2 text-sm text-red-300 dark:text-red-300">
                                    Tak, rozumiem i zgadzam się na wykonanie tej operacji
                                </span>
                            </label>
                        </div>
                    </div>

                    {% else %}
                    <p class="text-red-500">Nieznany rodzaj pola formularza: <code>{{ field.type }}</code></p>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <div class="flex justify-end space-x-4">
                <button type="button"
                    class="px-4 py-2 bg-zinc-700 dark:bg-zinc-700 text-zinc-300 dark:text-zinc-300 rounded-md hover:bg-zinc-600">
                    Anuluj
                </button>
                <button type="submit"
                    class="px-6 py-2 bg-zinc-600 dark:bg-zinc-600 text-white rounded-md hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-zinc-500 focus:ring-offset-2">
                    Wyślij
                </button>
            </div>
        </form>
    </div>
</div>
<script>
    console.log(`{{ augmentation_options }}`);
    const fields = {};

    {% for name, field in form.fields.items() %}
    {% if field.type == "input" %}
    fields['{{ name }}'] = { type: 'singleValue' };
    {% elif field.type == "radiogroup" %}
    fields['{{ name }}'] = { type: 'singleValue' };
    {% elif field.type == "table" %}
    fields['{{ name }}'] = {
        type: 'multiValue',
        columnNames: [
            {% for column in field.columns %}
    '{{ column.name }}',
        {% endfor %}
                    ]
                };
    {% elif field.type == "picklist" %}
    fields['{{ name }}'] = { type: 'singleValue' };
    {% endif %}
    {% endfor %}

    const requiredFields = {
        'implantPurpose': 'Cel augmentacji jest wymagany.',
        'bloodGroup': 'Grupa krwi jest wymagana.',
        'installationDate': 'Data instalacji jest wymagana.',
        'preferredFacility': 'Preferowana placówka jest wymagana.',
        'personalDataConsent': 'Musisz wyrazić zgodę na przetwarzanie danych osobowych ("Tak").',
        'intallationConsent': 'Musisz wyrazić zgodę na przeprowadzenie instalacji wszczepu ("Tak").'
    };

    document.getElementById('request-form').addEventListener('submit', (event) => {
        event.preventDefault();

        const formData = new FormData(event.target);
        let isValid = true;

        document.querySelectorAll('.error-message').forEach(el => el.remove());

        for (const [field, errorMessage] of Object.entries(requiredFields)) {
            const fieldValue = formData.get(field);
            const inputElement = document.querySelector(`[name="${field}"]`);

            if (!fieldValue || (['personalDataConsent', 'intallationConsent'].includes(field) && fieldValue !== 'yes')) {
                isValid = false;

                const error = document.createElement('span');
                error.textContent = errorMessage;
                error.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');

                const element = inputElement || document.getElementById(field);

                const container = element.closest('.form-group');
                if (container) {
                    container.appendChild(error);
                }
            }
        }

        if (!isValid) return;

        const augmentationRequest = {};

        for (const [name, { type, columnNames }] of Object.entries(fields)) {
            if (type === 'singleValue') {
                augmentationRequest[name] = formData.get(name);
            } else if (type === 'multiValue') {
                const rows = [];
                const rowData = {};

                formData.forEach((value, key) => {
                    const matches = key.match(/^([^[]+)\[(\d+)\]\[([^\]]+)\]$/);
                    if (matches && matches[1] === name) {
                        const [_, tableName, rowIndex, columnName] = matches;
                        if (!rowData[rowIndex]) {
                            rowData[rowIndex] = {};
                        }
                        rowData[rowIndex][columnName] = value;
                    }
                });

                Object.values(rowData).forEach(row => {
                    if (Object.keys(row).length === columnNames.length) {
                        rows.push(row);
                    }
                });

                augmentationRequest[name] = rows;
            }
        }

        fetch('', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(augmentationRequest),
        }).then(response => {
            if (response.ok) {
                window.location = response.headers.get('Location');
            }
        });
    });

    // Add spinner HTML inside additionalFeatures table body
    const spinnerHtml = `
        <span class="spinner absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
        </span>
    `;

    function getAugmentationOptions(option) {
        const tableBody = document.getElementById('additonalFeatures-table-body');
        const spinner = document.getElementById('loading-spinner') || (() => {
            const td = document.createElement('td');
            td.className = 'p-2 border-b border-zinc-600 dark:border-zinc-600';
            td.innerHTML = spinnerHtml;
            return td;
        })();

        tableBody.appendChild(spinner);
        spinner.classList.remove('hidden');

        fetch(`{{ id }}/options/${option}`, {
            method: 'GET',
        })
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(payload => {
                payload.forEach(item => {
                    addRowWithValue('additonalFeatures', item.value);
                });
            })
            .catch(error => {
                console.error('Error:', error);
            })
            .finally(() => {
                spinner.classList.add('hidden');
            });
    }

    function addRowWithValue(tableName, value = null) {
        const tableBody = document.getElementById(`${tableName}-table-body`);
        if (!tableBody || !tableBody.rows[0]) {
            console.error('Table body or first row not found');
            return;
        }
    
        const rowIndex = tableBody.rows.length;
        const newRow = document.createElement('tr');
    
        const columns = Array.from(tableBody.rows[0].cells).reduce((acc, cell) => {
            const input = cell.querySelector('input');
            if (!input || !input.name) return acc;
    
            const matches = input.name.match(/\[([^\]]+)\]$/);
            if (!matches) return acc;
    
            acc.push({
                name: matches[1],
                type: input.type || 'text'
            });
            return acc;
        }, []);
    
        columns.forEach(column => {
            const cell = document.createElement('td');
            cell.className = 'p-2 border-b border-zinc-600 dark:border-zinc-600';
    
            const input = document.createElement('input');
            input.type = column.type;
            input.name = `${tableName}[${rowIndex}][${column.name}]`;
            
            // Set value if provided
            if (value && value[column.name]) {
                input.value = value[column.name];
            }
            
            if (column.type === 'date') {
                input.placeholder = 'RRRR-MM-DD';
            }
            input.className = 'w-full px-2 py-1 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md text-sm focus:ring-2 focus:ring-blue-500';
    
            cell.appendChild(input);
            newRow.appendChild(cell);
        });
    
        const removeCell = document.createElement('td');
        removeCell.className = 'p-2 border-b border-zinc-600 dark:border-zinc-600 text-center';
        removeCell.innerHTML = `
            <button type="button" onclick="removeRow(this)" class="text-zinc-400 hover:text-red-500 transition-colors">
                <span class="fa fa-solid fa-times"></span>
            </button>
        `;
        newRow.appendChild(removeCell);
    
        tableBody.appendChild(newRow);
    }

    function removeRow(button) {
        const row = button.closest('tr');
        const tbody = row.closest('tbody');
        if (tbody && tbody.rows.length > 1) {
            row.remove();
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const implantType = document.getElementById('implantType');

        getAugmentationOptions(implantType.value);
        if (implantType) {
            implantType.addEventListener('change', function(event) {
                console.log(event.target.value);
                getAugmentationOptions(event.target.value);
            });
        }
    });
</script>

{% endblock %}