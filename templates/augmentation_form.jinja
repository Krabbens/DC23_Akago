{% extends "base.jinja" %}
{% block title %}Wniosek o augmentację{% endblock %}
{% block head %}
<style>
    .table-label {
        margin-bottom: 0.5rem;
        font-weight: 600;
    }
</style>
{% endblock %}
{% block content %}
<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-2xl w-full space-y-8 p-10 bg-zinc-800 dark:bg-zinc-800 rounded-xl dark:shadow-2xl border border-zinc-700">
        <div class="flex items-center justify-between">
            <h1 class="text-2xl font-bold text-zinc-100 dark:text-zinc-100">Wniosek o Personalizowaną Augmentację Cybernetyczną</h1>
            <img src="/static/logo.png" alt="Logo" class="h-12 w-12 rounded-md">
        </div>

        <form id="request-form" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                {% for name, field in form.fields.items() %}
                <div class="form-group rounded-md space-y-2 {% if field.type == 'table' %}col-span-full{% endif %}">
                    {% if field.type == "input" %}
                    <label for="{{ name }}" class="block text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</label>
                    <input type="{{ field.input_type }}" id="{{ name }}" name="{{ name }}"
                        class="w-full px-3 py-2 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md focus:outline-none focus:ring-2 focus:ring-zinc-500">

                    {% elif field.type == "radiogroup" %}
                    <fieldset>
                        <legend class="text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</legend>
                        <div class="space-y-2 rounded-md mt-2">
                            {% for radio in field.radios %}
                            <label class="inline-flex items-center text-zinc-300 dark:text-zinc-300">
                                <input type="radio" name="{{ name }}" value="{{ radio.value }}"
                                    class="form-radio text-zinc-500 focus:ring-zinc-500 bg-zinc-700 dark:bg-zinc-700 border-zinc-600 dark:border-zinc-600">
                                <span class="ml-2">{{ radio.label }}</span>
                            </label>
                            {% endfor %}
                        </div>
                    </fieldset>

                    {% elif field.type == "table" %}
                    <div class="space-y-2 rounded-md">
                        <p class="text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</p>
                        <div class="overflow-x-auto rounded-sm">
                            <table class="w-full border border-zinc-600 dark:border-zinc-600">
                                <thead>
                                    <tr class="bg-zinc-700 dark:bg-zinc-700">
                                        {% for column in field.columns %}
                                        <th class="p-2 text-left text-xs font-medium text-zinc-300 uppercase tracking-wider">
                                            {{ column.label }}
                                        </th>
                                        {% endfor %}
                                    </tr>
                                </thead>
                                <tbody id="{{ name }}-table-body">
                                    <tr>
                                        {% for column in field.columns %}
                                        <td class="p-2 border-b border-zinc-600 dark:border-zinc-600">
                                            <input type="{{ column.input_type|default('text') }}" 
                                                   name="{{ name }}[0][{{ column.name }}]"
                                                   {% if column.input_type == 'date' %}
                                                   placeholder="RRRR-MM-DD"
                                                   {% endif %}
                                                   class="w-full px-2 py-1 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md text-sm focus:ring-2 focus:ring-blue-500">
                                        </td>
                                        {% endfor %}
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <button type="button" onclick="addRow('{{ name }}')"
                            class="mt-2 px-3 py-2 bg-zinc-600 dark:bg-zinc-600 text-white rounded-md hover:bg-zinc-700 transition-colors">
                            <span class="fa fa-solid fa-plus"></span>
                        </button>
                    </div>

                    {% elif field.type == "picklist" %}
                    <label for="{{ name }}" class="block text-sm font-medium text-zinc-300 dark:text-zinc-300">{{ field.label }}</label>
                    <select id="{{ name }}" name="{{ name }}"
                        class="w-full px-3 py-2 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md focus:outline-none focus:ring-2 focus:ring-zinc-500">
                        {% for option in augmentation_options %}
                        <option value="{{ option.value }}" data-is-extra="{{ option.is_extra }}">
                            {{ option.value }}
                        </option>
                        {% endfor %}
                    </select>
                    <div id="extra-message" class="mt-4 hidden">
                        <div class="border border-red-700 dark:border-red-700 bg-red-900 dark:bg-red-900 p-4 rounded-md">
                            <label class="flex items-center">
                                <input type="checkbox" name="extra_permission" value="yes"
                                    class="form-checkbox text-red-500 focus:ring-red-500 bg-zinc-700 dark:bg-zinc-700 border-zinc-600 dark:border-zinc-600">
                                <span class="ml-2 text-sm text-red-300 dark:text-red-300">
                                    Tak, rozumiem i zgadzam się na wykonanie tej operacji
                                </span>
                            </label>
                        </div>
                    </div>

                    {% else %}
                    <p class="text-red-500">Nieznany rodzaj pola formularza: <code>{{ field.type }}</code></p>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <div class="flex justify-end space-x-4">
                <button type="button" class="px-4 py-2 bg-zinc-700 dark:bg-zinc-700 text-zinc-300 dark:text-zinc-300 rounded-md hover:bg-zinc-600">
                    Anuluj
                </button>
                <button type="submit"
                    class="px-6 py-2 bg-zinc-600 dark:bg-zinc-600 text-white rounded-md hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-zinc-500 focus:ring-offset-2">
                    Wyślij
                </button>
            </div>
        </form>
    </div>
</div>
<script>
    const fields = {};

    {% for name, field in form.fields.items() %}
    {% if field.type == "input" %}
    fields['{{ name }}'] = { type: 'singleValue' };
    {% elif field.type == "radiogroup" %}
    fields['{{ name }}'] = { type: 'singleValue' };
    {% elif field.type == "table" %}
    fields['{{ name }}'] = {
        type: 'multiValue',
        columnNames: [
            {% for column in field.columns %}
    '{{ column.name }}',
        {% endfor %}
                    ]
                };
    {% elif field.type == "picklist" %}
    fields['{{ name }}'] = { type: 'singleValue' };
    {% endif %}
    {% endfor %}

    const requiredFields = {
    'implantPurpose': 'Cel augmentacji jest wymagany.',
    'bloodGroup': 'Grupa krwi jest wymagana.',
    'installationDate': 'Data instalacji jest wymagana.',
    'preferredFacility': 'Preferowana placówka jest wymagana.',
    'personalDataConsent': 'Musisz wyrazić zgodę na przetwarzanie danych osobowych ("Tak").',
    'intallationConsent': 'Musisz wyrazić zgodę na przeprowadzenie instalacji wszczepu ("Tak").'
};

document.getElementById('request-form').addEventListener('submit', (event) => {
    event.preventDefault();

    const formData = new FormData(event.target);
    let isValid = true;

    // Clear existing error messages
    document.querySelectorAll('.error-message').forEach(el => el.remove());

    // Validate required fields
    for (const [field, errorMessage] of Object.entries(requiredFields)) {
        const fieldValue = formData.get(field);
        const inputElement = document.querySelector(`[name="${field}"]`);
        
        if (!fieldValue || (['personalDataConsent', 'intallationConsent'].includes(field) && fieldValue !== 'yes')) {
            isValid = false;

            const error = document.createElement('span');
            error.textContent = errorMessage;
            error.classList.add('error-message', 'text-red-500', 'text-sm', 'mt-1');

            const element = inputElement || document.getElementById(field);
            
            const container = element.closest('.form-group');
            if (container) {
                container.appendChild(error);
            }
        }
    }

    if (!isValid) return;

    const augmentationRequest = {};

    // Collect form data
    for (const [name, { type, columnNames }] of Object.entries(fields)) {
        if (type === 'singleValue') {
            augmentationRequest[name] = formData.get(name);
        } else if (type === 'multiValue') {
            const rows = [];
            const rowData = {};

            formData.forEach((value, key) => {
                const matches = key.match(/^([^[]+)\[(\d+)\]\[([^\]]+)\]$/);
                if (matches && matches[1] === name) {
                    const [_, tableName, rowIndex, columnName] = matches;
                    if (!rowData[rowIndex]) {
                        rowData[rowIndex] = {};
                    }
                    rowData[rowIndex][columnName] = value;
                }
            });

            Object.values(rowData).forEach(row => {
                if (Object.keys(row).length === columnNames.length) {
                    rows.push(row);
                }
            });

            augmentationRequest[name] = rows;
        }
    }

    fetch('', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(augmentationRequest),
    }).then(response => {
        if (response.ok) {
            window.location = response.headers.get('Location');
        }
    });
});

    function addRow(tableName) {
        const tableBody = document.getElementById(`${tableName}-table-body`);
        const rowIndex = tableBody.rows.length;
        const newRow = document.createElement('tr');
        
        const columns = Array.from(tableBody.rows[0].cells).map(cell => ({
            name: cell.querySelector('input').name.match(/\[([^\]]+)\]$/)[1],
            type: cell.querySelector('input').type
        }));

        columns.forEach(column => {
            const cell = document.createElement('td');
            cell.className = 'p-2 border-b border-zinc-600 dark:border-zinc-600';
            
            const input = document.createElement('input');
            input.type = column.type;
            input.name = `${tableName}[${rowIndex}][${column.name}]`;
            if (column.type === 'date') {
                input.placeholder = 'RRRR-MM-DD';
            }
            input.className = 'w-full px-2 py-1 bg-zinc-700 dark:bg-zinc-700 border border-zinc-600 dark:border-zinc-600 text-zinc-100 dark:text-zinc-100 rounded-md text-sm focus:ring-2 focus:ring-blue-500';
            
            cell.appendChild(input);
            newRow.appendChild(cell);
        });
        
        tableBody.appendChild(newRow);
    }
</script>

{% endblock %}